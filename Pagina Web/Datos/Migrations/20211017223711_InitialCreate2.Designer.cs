// <auto-generated />
using System;
using Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datos.Migrations
{
    [DbContext(typeof(DESBContext))]
    [Migration("20211017223711_InitialCreate2")]
    partial class InitialCreate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.Administrador", b =>
                {
                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Puesto")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Identificacion");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Entity.Cliente", b =>
                {
                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Horaio")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TipoCliente")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Identificacion");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Entity.Descuento", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CodProducto")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("NombreProducto")
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Porcentaje")
                        .HasColumnType("real");

                    b.HasKey("Codigo");

                    b.HasIndex("IdPersona");

                    b.ToTable("Descuentos");
                });

            modelBuilder.Entity("Entity.DetalleDePedido", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(11)");

                    b.Property<float>("Cantidad")
                        .HasColumnType("real");

                    b.Property<string>("CodPedido")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CodProducto")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Descuento")
                        .HasColumnType("int");

                    b.Property<float>("SubTotal")
                        .HasColumnType("real");

                    b.Property<float>("TotalConDescuento")
                        .HasColumnType("real");

                    b.Property<float>("TotalDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.Property<float>("total")
                        .HasColumnType("real");

                    b.HasKey("Codigo");

                    b.HasIndex("CodPedido");

                    b.ToTable("DetalleDePedidos");
                });

            modelBuilder.Entity("Entity.Domiciliario", b =>
                {
                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPermisoConduccion")
                        .HasColumnType("Date");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Identificacion");

                    b.ToTable("Domiciliarios");
                });

            modelBuilder.Entity("Entity.Pedido", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CodRuta")
                        .HasColumnType("nvarchar(11)");

                    b.Property<float>("Descuento")
                        .HasColumnType("real");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("Date");

                    b.Property<string>("IdPersona")
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Iva")
                        .HasColumnType("int");

                    b.Property<float>("SubTotal")
                        .HasColumnType("real");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<float>("TotalIva")
                        .HasColumnType("real");

                    b.HasKey("Codigo");

                    b.HasIndex("CodRuta");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Entity.Producto", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Cantidad")
                        .HasColumnType("real");

                    b.Property<float>("CantidadMinima")
                        .HasColumnType("real");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ruta")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Entity.Ruta", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CodDomiciliario")
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Codigo");

                    b.ToTable("Rutas");
                });

            modelBuilder.Entity("Entity.Usuario", b =>
                {
                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Rol")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Correo");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Entity.Vehiculo", b =>
                {
                    b.Property<string>("Placa")
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("FechaSoat")
                        .HasColumnType("Date");

                    b.Property<DateTime>("FechaTecnoMecanica")
                        .HasColumnType("Date");

                    b.Property<string>("IdDomiciliario")
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Placa");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("Entity.Descuento", b =>
                {
                    b.HasOne("Entity.Cliente", null)
                        .WithMany("Descuentos")
                        .HasForeignKey("IdPersona");
                });

            modelBuilder.Entity("Entity.DetalleDePedido", b =>
                {
                    b.HasOne("Entity.Pedido", null)
                        .WithMany("DetallesDePedidos")
                        .HasForeignKey("CodPedido");
                });

            modelBuilder.Entity("Entity.Pedido", b =>
                {
                    b.HasOne("Entity.Ruta", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("CodRuta");
                });
#pragma warning restore 612, 618
        }
    }
}
